import logging
from db import get_connection

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def handle_intent(intent, user_input):
    try:
        if intent == "welcome":
            return (
                "üéâ Xin ch√†o! M√¨nh l√† tr·ª£ l√Ω SportPro.\n"
                "B·∫°n mu·ªën:\n"
                "1. T∆∞ v·∫•n s·∫£n ph·∫©m\n"
                "2. Tra c·ª©u ƒë∆°n h√†ng\n"
                "3. T√¨m c·ª≠a h√†ng\n"
                "4. Ch√≠nh s√°ch mua h√†ng"
            )

        # ---------- 1. T∆Ø V·∫§N S·∫¢N PH·∫®M ----------
        elif intent == "product_advice":
            return (
                "üì¶ B·∫°n mu·ªën t∆∞ v·∫•n s·∫£n ph·∫©m n√†o?\n"
                "B·∫°n c√≥ th·ªÉ nh·∫≠p t√™n s·∫£n ph·∫©m (v√≠ d·ª•: gi√†y, qu·∫ßn √°o, t√∫i),\n"
                "ho·∫∑c t√™n th∆∞∆°ng hi·ªáu nh∆∞ Nike, Adidas ƒë·ªÉ ƒë∆∞·ª£c g·ª£i √Ω."
            )

        elif intent == "product_advice_details":
            keyword = user_input.lower()
            brand_links = {
                "nike": "https://sportpro.vn/collections/nike",
                "adidas": "https://sportpro.vn/collections/adidas",
                "converse": "https://sportpro.vn/collections/converse"
            }

            for brand in brand_links:
                if brand in keyword:
                    return f"üî• B·ªô s∆∞u t·∫≠p {brand.capitalize()}: {brand_links[brand]}"

            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT product_name, price, color, size, image_url
                FROM products
                WHERE product_name LIKE ? OR color LIKE ? OR size LIKE ?
            """, ('%' + keyword + '%', '%' + keyword + '%', '%' + keyword + '%'))

            columns = [column[0] for column in cursor.description]
            results = cursor.fetchall()
            cursor.close()
            conn.close()

            if results:
                rows = [dict(zip(columns, row)) for row in results]
                response = "\n\n".join([
                    f"‚úîÔ∏è {row['product_name']}\n"
                    f"M√†u: {row['color']} | Size: {row['size']}\n"
                    f"Gi√°: {row['price']} VND\n"
                    f"·∫¢nh: {row['image_url']}"
                    for row in rows
                ])
                return response
            else:
                return (
                    "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p v·ªõi t·ª´ kh√≥a b·∫°n nh·∫≠p.\n"
                    "B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i v·ªõi t√™n s·∫£n ph·∫©m ho·∫∑c th∆∞∆°ng hi·ªáu kh√°c nh∆∞: '√°o th·ªÉ thao', 'gi√†y nike', 't√∫i adidas'..."
                )

        # ---------- 2. TRA C·ª®U ƒê∆†N H√ÄNG ----------
        elif intent == "order_check_details":
    order_id = user_input.strip()
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT o.order_id, o.status, o.total_amount, o.order_date, c.full_name, o.delivery_address
            FROM orders o
            JOIN customers c ON o.customer_id = c.customer_id
            WHERE o.order_id = ?
        """, (order_id,))
        row = cursor.fetchone()
        cursor.close()
        conn.close()

        if row:
            columns = [column[0] for column in cursor.description]
            result = dict(zip(columns, row))
            return (
                f"üìã M√£ ƒë∆°n: {result['order_id']}\n"
                f"üë§ Kh√°ch: {result['full_name']}\n"
                f"üìÖ Ng√†y ƒë·∫∑t: {result['order_date']}\n"
                f"üßæ Tr·∫°ng th√°i: {result['status']}\n"
                f"üí∞ T·ªïng ti·ªÅn: {result['total_amount']} VND\n"
                f"üìç Giao ƒë·∫øn: {result['delivery_address']}"
            )
        else:
            return "‚ùå M√£ ƒë∆°n kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i."
    except Exception as e:
        logging.error(f"L·ªói khi tra c·ª©u ƒë∆°n h√†ng: {e}")
        return "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau."

        # ---------- 3. T√åM C·ª¨A H√ÄNG ----------
        elif intent == "store_locator":
            keyword = user_input.lower()
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT store_name, address, phone, opening_hours
                FROM stores
                WHERE city LIKE ?
            """, ('%' + keyword + '%',))

            results = cursor.fetchall()
            cursor.close()
            conn.close()

            if results:
                columns = [column[0] for column in cursor.description]
                rows = [dict(zip(columns, row)) for row in results]
                response = "\n\n".join([
                    f"üè¨ {row['store_name']}\n"
                    f"üìç {row['address']}\n"
                    f"üìû {row['phone']}\n"
                    f"üïí Gi·ªù m·ªü c·ª≠a: {row['opening_hours']}"
                    for row in rows
                ])
                return response
            else:
                return "‚ùå Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng n√†o ·ªü khu v·ª±c b·∫°n cung c·∫•p. B·∫°n th·ª≠ t√™n kh√°c nh√©!"

        # ---------- 4. H·ªéI V·ªÄ CH√çNH S√ÅCH ----------
        elif intent == "faq":
            keyword = user_input.lower()
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT question, answer FROM faqs WHERE topic LIKE ?
            """, ('%' + keyword + '%',))

            results = cursor.fetchall()
            cursor.close()
            conn.close()

            if results:
                columns = [column[0] for column in cursor.description]
                rows = [dict(zip(columns, row)) for row in results]
                response = "\n\n".join([
                    f"‚ùì {row['question']}\nüí° {row['answer']}"
                    for row in rows
                ])
                return response
            else:
                return "‚ùå M√¨nh ch∆∞a c√≥ th√¥ng tin v·ªÅ ch√≠nh s√°ch ƒë√≥. B·∫°n c√≥ th·ªÉ h·ªèi: v·∫≠n chuy·ªÉn, ƒë·ªïi tr·∫£, b·∫£o h√†nh..."

        # ---------- M·∫∂C ƒê·ªäNH ----------
        else:
            return (
                "ü§ñ M√¨nh ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n.\n"
                "B·∫°n vui l√≤ng ch·ªçn t·ª´ menu ch√≠nh b·∫±ng c√°ch nh·∫Øn 'menu'."
            )

    except Exception as e:
        logging.error(f"L·ªói x·ª≠ l√Ω intent '{intent}' v·ªõi input '{user_input}': {e}")
        return "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau."
