import logging
from db import get_connection

logging.basicConfig(level=logging.INFO)

def handle_intent(intent, user_input):
    try:
        if intent == "welcome":
            return (
                "üéâ Xin ch√†o! M√¨nh l√† tr·ª£ l√Ω SportPro.\n"
                "B·∫°n mu·ªën:\n"
                "1. T∆∞ v·∫•n s·∫£n ph·∫©m\n"
                "2. Tra c·ª©u ƒë∆°n h√†ng\n"
                "3. T√¨m c·ª≠a h√†ng\n"
                "4. Ch√≠nh s√°ch mua h√†ng"
            )

        elif intent == "product_advice":
            return (
                "üì¶ B·∫°n mu·ªën t∆∞ v·∫•n s·∫£n ph·∫©m n√†o?\n"
                "H√£y nh·∫≠p t√™n s·∫£n ph·∫©m (gi√†y, qu·∫ßn √°o...) ho·∫∑c th∆∞∆°ng hi·ªáu (Nike, Adidas)."
            )

        elif intent == "product_advice_details":
            conn = get_connection()
            cursor = conn.cursor()
            keyword = f"%{user_input}%"
            cursor.execute("""
                SELECT TOP 3 product_name, price, color, size, image_url
                FROM products
                WHERE product_name LIKE ? OR color LIKE ? OR size LIKE ?
            """, (keyword, keyword, keyword))

            rows = cursor.fetchall()
            cursor.close()
            conn.close()

            if rows:
                return "\n\n".join([
                    f"‚úî {r[0]}\nM√†u: {r[2]} | Size: {r[3]}\nGi√°: {r[1]} VND\n·∫¢nh: {r[4]}"
                    for r in rows
                ])
            else:
                return "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p. Vui l√≤ng th·ª≠ l·∫°i."

        elif intent == "order_check_start":
            return "üì¶ Vui l√≤ng nh·∫≠p m√£ ƒë∆°n h√†ng c·ªßa b·∫°n (v√≠ d·ª•: SP20230501):"

        elif intent == "order_check_details":
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT o.order_id, c.full_name, o.order_date, o.status, o.total_amount, o.delivery_address
                FROM orders o
                JOIN customers c ON o.customer_id = c.customer_id
                WHERE o.order_id = ?
            """, (user_input.strip(),))

            row = cursor.fetchone()
            cursor.close()
            conn.close()

            if row:
                return (
                    f"üìã ƒê∆°n h√†ng: {row[0]}\n"
                    f"üë§ Kh√°ch: {row[1]}\n"
                    f"üìÖ Ng√†y: {row[2]}\n"
                    f"üßæ Tr·∫°ng th√°i: {row[3]}\n"
                    f"üí∞ T·ªïng: {row[4]} VND\n"
                    f"üìç Giao ƒë·∫øn: {row[5]}"
                )
            else:
                return "‚ùå M√£ ƒë∆°n kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i."

        elif intent == "store_locator":
            conn = get_connection()
            cursor = conn.cursor()
            keyword = f"%{user_input}%"
            cursor.execute("""
                SELECT store_name, address, phone, opening_hours
                FROM stores
                WHERE city LIKE ?
            """, (keyword,))
            results = cursor.fetchall()
            cursor.close()
            conn.close()

            if results:
                return "\n\n".join([
                    f"üè¨ {r[0]}\nüìç {r[1]}\nüìû {r[2]}\nüïí Gi·ªù m·ªü: {r[3]}"
                    for r in results
                ])
            else:
                return "‚ùå Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng ·ªü khu v·ª±c b·∫°n cung c·∫•p."

        elif intent == "faq":
            conn = get_connection()
            cursor = conn.cursor()
            keyword = f"%{user_input}%"
            cursor.execute("""
                SELECT question, answer FROM faqs WHERE topic LIKE ?
            """, (keyword,))
            faqs = cursor.fetchall()
            cursor.close()
            conn.close()

            if faqs:
                return "\n\n".join([
                    f"‚ùì {q}\nüí° {a}" for q, a in faqs
                ])
            else:
                return "‚ùå Kh√¥ng c√≥ ch√≠nh s√°ch n√†o ph√π h·ª£p v·ªõi c√¢u h·ªèi c·ªßa b·∫°n."

        else:
            return "ü§ñ M√¨nh ch∆∞a hi·ªÉu. B·∫°n c√≥ th·ªÉ nh·∫Øn 'menu' ƒë·ªÉ xem c√°c t√πy ch·ªçn."

    except Exception as e:
        logging.error(f"L·ªói x·ª≠ l√Ω intent {intent}: {e}")
        return "‚ö†Ô∏è ƒê√£ c√≥ l·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau."
